class o { constructor(t = {}) { this.v = "1.0.0", this.survey = t.surveyData, this.customCSS = t.customCSS || "", this.onComplete = t.onComplete || (() => { }), this.onClose = t.onClose || (() => { }), this.autoClose = t.autoClose || 0, this.container = null, this.token = t.token || "", this.responseToken = t.responseToken || "", this.surveyId = t.surveyId || "", this.userId = t.userId || "", this.extraInfo = t.extraInfo || "", this.branding = t.branding || !1, this.position = t.position || "inline", this.feedbackLabel = t.feedbackLabel || "Give Feedback", this.apiUrl = "https://app.opineeo.com/api/survey/v0", this.i = 0, this.done = !1, this.s = !1, this.r = {}, this.ot = {}, this.scopeClass = null, this.loading = !1, this.error = null, this.opened = "inline" === this.position } async mount(t) { this.container = document.getElementById(t), this.container && (this.injectCSS(), this.container.style.display = "block", "inline" === this.position && (!this.survey && this.token && this.surveyId && await this.fetchSurveyData(), this.token && this.surveyId || (this.branding = !0), this.survey || (this.error = "Survey not found"), this.initializeScopeClass(), this.addCustomStyles()), this.render(), ["click", "input"].forEach(t => this.container.addEventListener(t, e => this[`on${t[0].toUpperCase()}${t.slice(1)}`](e)))) } async fetchSurveyData() { this.loading = !0, this.render(); try { const t = `${this.apiUrl}?surveyId=${encodeURIComponent(this.surveyId)}`, e = await fetch(t, { method: "GET", headers: { "Content-Type": "application/json", Authorization: `Bearer ${this.token}` } }); if (!e.ok) throw new Error((await e.json()).error || "Failed to fetch survey data"); const i = await e.json(), s = i?.data; if (this.responseToken = s.responseToken, this.branding = s.branding, !i?.success || !s) throw new Error("Invalid survey data received"); this.survey = s, s.style && (this.customCSS = s.style) } catch (t) { console.error("Error fetching survey data:", t), this.error = t.message || "Failed to load survey" } finally { this.loading = !1 } } injectCSS() { if (document.getElementById("opineeo-style")) return; const t = document.createElement("style"); t.id = "opineeo-style", t.textContent = ":root{--sv-primary-color:currentColor;--sv-secondary-bg:rgba(0,0,0,.1);--sv-secondary-border:rgba(0,0,0,.2);--sv-text-color:inherit}.sv{position:relative;display:flex;flex-direction:column;justify-content:space-between;background:#18181b;color:#fafafa;min-width:300px;min-height:300px;font:inherit;overflow:hidden;padding:16px;border-radius:12px}.sv-anchored{position:fixed!important;z-index:9999!important;box-shadow:0 10px 25px rgba(0,0,0,.3),0 6px 12px rgba(0,0,0,.2),0 0 0 1px rgba(255,255,255,.05)!important;max-width:380px;overflow-y:auto}.sv-top-right{top:20px!important;right:20px!important;bottom:auto!important;left:auto!important}.sv-top-left{top:20px!important;left:20px!important;bottom:auto!important;right:auto!important}.sv-bottom-right{bottom:20px!important;right:20px!important;top:auto!important;left:auto!important}.sv-bottom-left{bottom:20px!important;left:20px!important;top:auto!important;right:auto!important}.sv-feedback-btn{position:fixed;z-index:9998;padding:8px 16px;background:#18181b;color:#fafafa;border:1px solid rgba(255,255,255,.15);border-radius:8px;cursor:pointer;font:inherit;font-size:13px;font-weight:bold;box-shadow:0 2px 8px rgba(0,0,0,.3);transition:all .2s ease;backdrop-filter:blur(10px)}.sv-feedback-btn:hover{box-shadow:0 4px 12px rgba(0,0,0,.4);border-color:rgba(255,255,255,.25);transform:translateY(-1px)}.sv-feedback-btn.btn-top-right,.sv-feedback-btn.btn-bottom-right{right:20px}.sv-feedback-btn.btn-top-left,.sv-feedback-btn.btn-bottom-left{left:20px}.sv-feedback-btn.btn-top-right,.sv-feedback-btn.btn-top-left{top:20px}.sv-feedback-btn.btn-bottom-right,.sv-feedback-btn.btn-bottom-left{bottom:20px}.x{position:absolute;top:4px;right:4px;width:32px;height:32px;border:0;border-radius:50%;background:transparent;opacity:.7;cursor:pointer;font-size:24px;color:inherit;z-index:999}.x:hover{opacity:1}.body{margin-bottom:1rem;overflow:hidden;transition:opacity .3s ease}.qc{width:100%;height:100%;}.qt{font-weight:600;margin-bottom:.5rem;font-size:18px;text-align:start}.qd{opacity:.8;margin-bottom:1rem;font-size:16px;text-align:start;max-width:265px}.qs{margin-bottom:1rem;font-size:20px;max-width:265px}.opts{margin-top:1.8rem;display:flex;flex-direction:column;align-items:flex-start}.req{color:#ef4444;font-size:1.2rem}.ft{display:flex;flex-direction:column}.nav{display:flex}.btn{display:flex;align-items:center;gap:.5rem;padding:.5rem 1rem;border-radius:6px;cursor:pointer;font:inherit;transition:all .2s ease}.btno{margin-right:.5rem;background:#262626;border:1px solid var(--sv-secondary-border);color:#fff}.btno:hover{background:rgba(0,0,0,.15);border-color:rgba(0,0,0,.3)}.btnp{border:1px solid rgba(0,0,0,.3);background:#8881DF;color:#fff}.btnp:hover{opacity:.7}.btn:disabled{opacity:.5;cursor:not-allowed}.spinner{animation:spin 1s linear infinite}.qtc{position:relative;overflow:hidden;min-height:200px;width:100%;height:auto}.qtc .qc{position:relative;width:100%;height:auto}.q-exit-right{animation:oR .3s ease-out forwards}.q-enter-right{animation:iR .4s ease-out forwards}.q-exit-left{animation:oL .3s ease-out forwards}.q-enter-left{animation:iL .4s ease-out forwards}.brand{margin-top:1rem;font-size:.75rem;opacity:.7;text-align:start}.brand a{color:inherit}.rad,.chk{display:flex;align-items:center;gap:.5rem;margin-bottom:.5rem;cursor:pointer}.txt{width:100%;padding:.5rem;border:1px solid currentColor;border-radius:6px;font-size:16px;background:transparent;box-sizing:border-box;color:inherit;font-family:inherit}.txt:focus{outline:none}.stars{display:flex;justify-content:center;gap:.5rem}.star-btn{padding:.25rem;background:none;border:none;cursor:pointer;border-radius:50%;transition:all .2s ease;display:flex;align-items:center;justify-content:center;outline:0}.star-btn:hover{transform:scale(1.1)}.star-btn.star-sel{background-color:transparent}.star-svg{width:30px;height:30px;transition:all .2s ease}.star-btn:hover .star-svg{transform:scale(1.1)}.star-btn:not(.star-sel) .star-svg{opacity:.3}.ltxt{width:100%}.ta{width:100%;min-height:6rem;resize:none;border:1px solid currentColor;border-radius:6px;padding:.5rem;font-size:16px;background:#131417;box-sizing:border-box;color:inherit;font-family:inherit}.ta:focus{outline:none;}.cc{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:2rem;min-height:250px;position:relative}.ca{margin-bottom:2rem;position:relative}.sc-circle{width:80px;height:80px;border-radius:50%;background:linear-gradient(135deg,#10b981,#059669);display:flex;align-items:center;justify-content:center;position:relative;animation:scaleIn .6s cubic-bezier(.68,-.55,.265,1.55);box-shadow:0 8px 25px rgba(16,185,129,.3)}.sc-circle::before{content:'';position:absolute;width:100px;height:100px;border-radius:50%;background:linear-gradient(135deg,#10b981,#059669);opacity:.3;animation:pulse 2s infinite}.sc-check{position:relative;width:24px;height:24px;transform:rotate(45deg);z-index:2}.cs{position:absolute;width:5px;height:25px;background-color:#fff;left:15px;top:-3px;border-radius:2px;animation:checkmarkStem .4s ease-in-out .3s both}.ck{position:absolute;width:15px;height:5px;background-color:#fff;left:4px;top:17px;border-radius:2px;animation:checkmarkKick .4s ease-in-out .5s both}@keyframes spin{to{transform:rotate(360deg)}}@keyframes oR{0%{transform:translateX(0);opacity:1}100%{transform:translateX(-100%);opacity:0}}@keyframes iR{0%{transform:translateX(100%);opacity:0}100%{transform:translateX(0);opacity:1}}@keyframes oL{0%{transform:translateX(0);opacity:1}100%{transform:translateX(100%);opacity:0}}@keyframes iL{0%{transform:translateX(-100%);opacity:0}100%{transform:translateX(0);opacity:1}}@keyframes p{0%,100%{transform:translateX(0)}25%{transform:translateX(-4px)}75%{transform:translateX(6px)}}@keyframes a{0%{opacity:0;transform:scale(.3)}50%{transform:scale(1.1)}100%{opacity:1;transform:scale(1)}}@keyframes scaleIn{0%{transform:scale(0);opacity:0}100%{transform:scale(1);opacity:1}}@keyframes pulse{0%,100%{transform:scale(1);opacity:.3}50%{transform:scale(1.1);opacity:.1}}@keyframes checkmarkStem{0%{height:0}100%{height:25px}}@keyframes checkmarkKick{0%{width:0}100%{width:15px}}@media(max-width:380px){.sv{max-width:100%;}.qt{font-size:16px}.star{font-size:20px}}", document.head.appendChild(t), this.t = 1 } initializeScopeClass() { if (!this.scopeClass) { const t = this.survey?.id || "widget-" + Date.now() + "-" + Math.random().toString(36).slice(2, 6); this.scopeClass = "sv-scope-" + t.replace(/[^a-zA-Z0-9-_]/g, "-") } } addCustomStyles() { if (!this.customCSS) return; this.initializeScopeClass(); const t = "sv-custom-styles-" + this.scopeClass.replace("sv-scope-", ""); document.getElementById(t)?.remove(); let e = this.customCSS;["sv", "qt", "qd", "qc", "opts", "qs", "btn", "btno", "btnp", "rad", "chk", "txt", "ta", "stars", "star-btn", "star-svg", "star-sel", "x", "body", "ft", "nav", "brand", "ltxt", "req", "ok", "cc", "ca", "sc-circle", "sc-check"].forEach(t => e = e.replace(new RegExp(`\\.${t}\\b`, "g"), `.${this.scopeClass} .${t}`)); const i = document.createElement("style"); i.id = t, i.textContent = e, document.head.appendChild(i) } render() { if (!this.container) return; if (this.scopeClass && (this.container.className = this.scopeClass), "inline" !== this.position && !this.opened) return void (this.container.innerHTML = `<button class="sv-feedback-btn btn-${this.position}" data-a="open-survey">${this.feedbackLabel}</button>`); const t = this.survey?.questions || [], e = this.i >= t.length, i = `<div class="sv${"inline" !== this.position ? ` sv-anchored sv-${this.position}` : ""}">` + ("inline" !== this.position ? '<button class="x" data-a="close" aria-label="Close">&times;</button>' : ""), s = this.loading ? `<div class="cc"><div class="ca">${this.getSLoadingIcon()}</div>` : "", o = this.error || !this.survey && !this.loading ? `<div class="cc"><div class="ca">${this.getUnavailableIcon()}</div><p>Survey not available</p></div>` : "", r = t.length ? (this.done || e ? this.renderDone() : `<div class="qtc">${this.renderQuestionCard(t[this.i])}</div>`) + `<div class="ft">${this.done ? "" : `<div class="nav">${this.i > 0 ? `<button class="btn btno" data-a="prev">${this.getPrevArrowIcon()}</button>` : ""}<button class="btn btnp" data-a="next" ${this.s ? "disabled" : ""}>${this.s ? this.getSpinnerIcon() : this.i === t.length - 1 ? this.getSendIcon() : this.getNextArrowIcon()}</button></div>`}</div>` : "", n = (this.branding ? '<div class="brand">Powered by <a href="https://opineeo.com" target="_blank"><b>Opineeo</b></a></div>' : "") + "</div>"; this.container.innerHTML = i + s + o + r + n, this.focusInput() } getPrevArrowIcon() { return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#fff" stroke-width="2"><path d="m15 18-6-6 6-6"/></svg>' } getNextArrowIcon() { return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--primary-foreground, rgba(255,255,255,.7))" stroke-width="2"><path d="m9 18 6-6-6-6"/></svg>' } getSendIcon() { return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--primary-foreground, rgba(255,255,255,.7))" stroke-width="2"><path d="m22 2-7 20-4-9-9-4Z"/><path d="M22 2 11 13"/></svg>' } getSpinnerIcon() { return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="var(--primary-foreground, rgba(255,255,255,.7))" stroke-width="2" class="spinner"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>' } getSLoadingIcon() { return '<div style="display: flex; align-items: center; justify-content: center; width: 80px; height: 80px; margin: 0 auto;">\n            <div style="width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.2); border-top: 4px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite;"></div>\n        </div>' } getUnavailableIcon() { return '<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"/><path d="M12 15h.01"/><path d="M12 7v4"/></svg>' } renderQuestionCard(t) { return `<div class="body"><div class="qc"><h2 class="qt">${t.title}${t.required ? ' <span class="req">*</span>' : ""}</h2>${t.description && "STATEMENT" !== t.format ? `<p class="qd">${t.description}</p>` : ""}<div class="opts">${this.renderQuestion(t)}</div></div></div>` } resp(t, e, i, s) { const o = { questionId: t, isOther: s }, r = typeof e; return "string" === r ? o.textValue = e : "number" === r ? o.numberValue = e : "boolean" === r && (o.booleanValue = e), null != i && (o.optionId = i), o } renderQuestion(t) { const e = this.r[t.id]; if ("YES_NO" === t.format) { const i = !0 === e?.booleanValue ? "yes" : !1 === e?.booleanValue ? "no" : null; return this.radioList(t.id, [{ id: "yes", text: t.yesLabel || "Yes" }, { id: "no", text: t.noLabel || "No" }], i) } if ("SINGLE_CHOICE" === t.format) { const i = e?.optionId; return t.options.map(e => { const s = i === e.id; return `<label class="rad"><input type="radio" name="q_${t.id}" value="${e.id}" ${s ? "checked" : ""} data-a="set" data-q="${t.id}"><span>${e.text}</span></label>` + (e.isOther ? `<div class="other" ${s ? "" : "hidden"}><input class="txt" type="text" placeholder="Please specify…" value="${this.ot[t.id] || ""}" data-a="other" data-q="${t.id}"></div>` : "") }).join("") } if ("MULTIPLE_CHOICE" === t.format) { const i = e?.optionId ? e.optionId.split(",") : [], s = i.some(e => t.options.find(t => t.id === e)?.isOther); return t.options.map(e => { const o = i.includes(e.id); return `<label class="chk"><input type="checkbox" value="${e.id}" ${o ? "checked" : ""} data-a="toggle" data-q="${t.id}"><span>${e.text}</span></label>` + (e.isOther ? `<div class="other" ${s ? "" : "hidden"}><input class="txt" type="text" placeholder="Please specify…" value="${this.ot[t.id] || ""}" data-a="other" data-q="${t.id}"></div>` : "") }).join("") } if ("STAR_RATING" === t.format) { const i = e?.numberValue || 0; return `<div class="stars" data-q="${t.id}" data-a="stars">` + [1, 2, 3, 4, 5].map(t => `<button class="star-btn${t <= i ? " star-sel" : ""}" data-star="${t}" aria-label="${t} star"><svg class="star-svg" width="24" height="24" viewBox="0 0 24 24" fill="${t <= i ? "#fbbf24" : "none"}" stroke="${t <= i ? "#fbbf24" : "#94a3b8"}" stroke-width="2"><polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26 12,2"/></svg></button>`).join("") + "</div>" } return "LONG_TEXT" === t.format ? `<div class="ltxt"><textarea class="ta" data-a="setText" data-q="${t.id}">${e?.textValue || ""}</textarea></div>` : "STATEMENT" === t.format ? `<p class="qs">${t.description || ""}</p>` : '<p class="qd">Unsupported question type</p>' } radioList(t, e, i) { return e.map(e => `<label class="rad"><input type="radio" name="q_${t}" value="${e.id}" ${i === e.id ? "checked" : ""} data-a="set" data-q="${t}"><span>${e.text}</span></label>`).join("") } renderDone() { return this.autoClose > 0 && setTimeout(() => this.close(), this.autoClose), '<div class="cc"><div class="ca"><div class="sc-circle"><div class="sc-check"><div class="cs"></div><div class="ck"></div></div></div></div></div>' } transitionToNext() { this.i < this.survey.questions.length - 1 && this.transitionToQuestion(this.i + 1, "right") } transitionToPrevious() { this.i > 0 && this.transitionToQuestion(this.i - 1, "left") } transitionToQuestion(t, e) { if (!this.container) return; const i = this.container.querySelector(".qtc"); if (!i) return this.i = t, void this.render(); const s = "right" === e ? "q-exit-right" : "q-exit-left", o = "right" === e ? "q-enter-right" : "q-enter-left"; i.classList.add(s), setTimeout(() => { this.i = t; const e = this.survey.questions[this.i]; e && (i.innerHTML = this.renderQuestionCard(e), i.classList.remove(s), i.classList.add(o), setTimeout(() => i.classList.remove(o), 400), this.render(), this.focusInput()) }, 300) } async handleSubmit() { this.s = !0, this.render(); try { const t = await this.pack(); if (this.token && this.responseToken) try { const e = await fetch(this.apiUrl, { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${this.token}` }, body: JSON.stringify(t) }), i = await e.json(); e.ok || console.error("Failed to submit survey response: " + i.error) } catch (t) { console.error("Submission error:", t) } this.onComplete(t), this.done = !0 } catch (t) { console.error("Submission error:", t) } finally { this.s = !1, this.render() } } async onClick(t) { if (!this.container) return; const e = t.target, i = e.dataset.a || e.closest("[data-a]")?.dataset.a; if (i) { if ("open-survey" === i) return this.opened = !0, !this.survey && this.token && this.surveyId && await this.fetchSurveyData(), this.token && this.surveyId || (this.branding = !0), this.survey || (this.error = "Survey not found"), this.initializeScopeClass(), this.addCustomStyles(), void this.render(); if ("close" === i) return this.close(); if (this.survey) { if ("prev" === i) return this.transitionToPrevious(); if ("next" === i) { const t = this.survey.questions[this.i]; return this.isValidQuestion(t) ? this.i === this.survey.questions.length - 1 ? this.handleSubmit() : this.transitionToNext() : this.shake() } if ("set" === i) { const t = e.dataset.q || e.closest("[data-q]")?.dataset.q, i = this.survey.questions.find(e => e.id === t), s = i?.options?.find(t => t.id === e.value); return this.r[t] = "YES_NO" === i?.format ? this.resp(t, "yes" === e.value, void 0, !1) : this.resp(t, void 0, e.value, !!s?.isOther), s?.isOther || delete this.ot[t], this.render() } if ("toggle" === i) { const t = e.dataset.q || e.closest("[data-q]")?.dataset.q, i = this.survey.questions.find(e => e.id === t), s = i?.options?.find(t => t.id === e.value), o = this.r[t]?.optionId ? this.r[t].optionId.split(",") : [], r = o.indexOf(e.value); r > -1 ? (o.splice(r, 1), s?.isOther && delete this.ot[t]) : o.push(e.value); const n = o.some(t => i?.options?.find(e => e.id === t)?.isOther); return this.r[t] = this.resp(t, void 0, o.join(","), n), this.render() } if ("stars" === i) { const t = e.closest(".star-btn"); if (!t) return; const i = e.closest("[data-q]").dataset.q; return this.r[i] = this.resp(i, +t.dataset.star, void 0, !1), this.render() } } } } onInput(t) { if (!this.survey || !this.container) return; const e = t.target, i = e.dataset.a; if (!i) return; const s = e.dataset.q; "other" === i && (this.ot[s] = e.value), "setText" === i && (this.r[s] = this.resp(s, e.value, void 0, !1)) } shake() { if (!this.container) return; const t = this.container.querySelector(".qc"); t && (t.style.animation = "p .25s ease", setTimeout(() => t.style.animation = "", 250)) } isValidQuestion(t) { const e = this.r[t.id]; return !t.required || e && (!e.isOther || this.ot[t.id] && "" !== this.ot[t.id].trim()) } focusInput() { if (!this.container || !this.survey || !this.survey.questions) return; const t = this.survey.questions[this.i]; setTimeout(() => { this.container && ("LONG_TEXT" === t?.format ? this.container.querySelector(".ta") : this.container.querySelector(".other:not([hidden]) .txt"))?.focus() }, 30) } close() { if (this.destroy(), this.onClose(), this.container) { const t = this.container.parentNode; t && t.parentNode && t.parentNode.removeChild(t) } } destroy() { if (this.scopeClass) { const t = "sv-custom-styles-" + this.scopeClass.replace("sv-scope-", ""); document.getElementById(t)?.remove() } this.container && ["click", "input"].forEach(t => this.container.removeEventListener(t, e => this[`on${t[0].toUpperCase()}${t.slice(1)}`](e))), this.container && (this.container.innerHTML = ""), this.container = null, this.survey = null, this.r = {}, this.ot = {}, this.i = 0, this.done = !1, this.s = !1, this.loading = !1, this.error = null, this.scopeClass = null } async pack() { const t = Object.keys(this.r).map(t => { const e = this.r[t], i = this.survey.questions.find(e => e.id === t); let s = e.textValue || "", o = null; if (i) if ("YES_NO" === i.format) "boolean" == typeof e.booleanValue && (s = e.booleanValue ? i.yesLabel || "Yes" : i.noLabel || "No"); else if ("MULTIPLE_CHOICE" === i.format) { const r = e.optionId.split(",").map(t => t.trim()).filter(t => !!t), n = Array.isArray(i.options) ? i.options : []; o = r.map(t => n.find(e => e.id === t)).filter(t => !!t).map(e => { const i = { optionId: e.id, textValue: e.text || "", isOther: e.isOther || !1 }; return e.isOther && this.ot && this.ot[t] && (i.textValue = this.ot[t]), i }), s = "" } else if ("SINGLE_CHOICE" === i.format) { const t = i.options.find(t => t.id === e.optionId); s = t ? t.text : "" } e.isOther && this.ot[t] && "MULTIPLE_CHOICE" !== i.format && (s = this.ot[t]); const r = { ...e, textValue: s, questionTitle: i?.title || "", questionFormat: i?.format || "" }; return "MULTIPLE_CHOICE" === i?.format && o && (r.answers = o), r }), e = { responseToken: this.responseToken, surveyId: this.surveyId, responses: t }; return this.userId && (e.userId = this.userId), this.extraInfo && (e.extraInfo = this.extraInfo), e } } window.initSurveyWidget = t => new o(t), (() => { if (!customElements.get("opineeo-survey")) { class e extends HTMLElement { static get observedAttributes() { return ["survey-id", "token", "auto-close", "user-id", "extra-info", "custom-css", "oncomplete", "onclose", "survey", "position", "feedback-label"] } constructor() { super(), this._id = "opn-" + Math.random().toString(36).slice(2), this._widget = null, this._surveyData = void 0, this._customCSS = void 0 } connectedCallback() { if (!this._mounted) { const t = document.createElement("div"); t.id = this._id, this.appendChild(t), this._mounted = !0 } this._mount() } disconnectedCallback() { this._widget?.destroy?.(), this._widget = null } attributeChangedCallback() { this._mounted && this._mount() } get surveyData() { return this._surveyData } set surveyData(t) { this._surveyData = t, this._mounted && this._mount() } get customCSS() { return this._customCSS } set customCSS(t) { this._customCSS = t, this._mounted && this._mount() } _mount() { const e = this.getAttribute("oncomplete"), i = this.getAttribute("onclose"), s = t(e), r = t(i); let n = null; const a = this.getAttribute("survey"); if (a) try { n = JSON.parse(a) } catch (t) { console.warn("Invalid JSON in survey attribute:", t) } const d = { surveyId: this.getAttribute("survey-id") || "", token: this.getAttribute("token") || "", autoClose: +(this.getAttribute("auto-close") || 0), userId: this.getAttribute("user-id") || "", extraInfo: "" === this.getAttribute("extra-info"), surveyData: n || this._surveyData, customCSS: this.getAttribute("custom-css") || this._customCSS, position: this.getAttribute("position") || "inline", feedbackLabel: this.getAttribute("feedback-label") || "Give Feedback", onComplete: t => { s?.(t, this), this.dispatchEvent(new CustomEvent("complete", { detail: t })) }, onClose: () => { r?.(this), this.dispatchEvent(new Event("close")) } }; this._widget = new o(d), this._widget.mount(this._id) } } customElements.define("opineeo-survey", e) } function t(t) { if (!t) return null; let e = window; for (const i of t.split(".")) e = e?.[i]; return "function" == typeof e ? e : null } })();